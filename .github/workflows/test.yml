name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      NODE_ENV: test
      CI: true
      DB_HOST: mysql
      DB_USER: root
      DB_PASSWORD: root
      DB_NAME: nephslair_test
      DB_DIALECT: mysql
      JWT_SECRET: test_jwt_secret_key_for_ci
      PORT: 0

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: nephslair_test
        # Health check runs inside the container (uses 127.0.0.1).
        # From the runner, we connect using the service name "mysql".
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Create test environment file
        working-directory: ./backend
        run: |
          cat > .env.test << EOF
          NODE_ENV=${NODE_ENV}
          PORT=${PORT}
          DB_HOST=${DB_HOST}
          DB_USER=${DB_USER}
          DB_PASSWORD=${DB_PASSWORD}
          DB_NAME=${DB_NAME}
          DB_DIALECT=${DB_DIALECT}
          JWT_SECRET=${JWT_SECRET}
          JWT_EXPIRE=7d
          EOF

      - name: Install MySQL client & wait for service
        run: |
          set -e  # Exit on any error

          # Retry-friendly apt-get (handles transient network hiccups)
          OK=0
          for t in 1 2 3; do
            if sudo apt-get update; then OK=1; break; fi
            echo "apt-get update retry $t"; sleep 2
          done
          if [ $OK -ne 1 ]; then
            echo "❌ Failed to apt-get update after retries"; exit 1
          fi

          OK=0
          for t in 1 2 3; do
            if sudo apt-get install -y --no-install-recommends mysql-client; then OK=1; break; fi
            echo "apt-get install retry $t"; sleep 2
          done
          if [ $OK -ne 1 ]; then
            echo "❌ Failed to install mysql-client after retries"; exit 1
          fi

          echo "MySQL client installed successfully"
          echo ""
          echo "Waiting for MySQL service container (hostname: mysql) to be ready..."
          echo "Note: Service container health check may take up to 30 seconds..."

          MAX_ATTEMPTS=90
          ATTEMPT=0
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            if mysqladmin ping -h mysql -u root -proot --connect-timeout=5 --silent 2>/dev/null; then
              echo "✅ MySQL is ready! (attempt $ATTEMPT/$MAX_ATTEMPTS)"
              # Verify with a simple query
              if mysql -h mysql -u root -proot --connect-timeout=5 -e "SELECT 1;" >/dev/null 2>&1; then
                echo "✅ MySQL connection verified with query"
                exit 0
              else
                echo "⚠️ Ping successful but query failed, retrying..."
                sleep 1
                continue
              fi
            fi
            if [ $((ATTEMPT % 10)) -eq 0 ]; then
              echo "Still waiting... (attempt $ATTEMPT/$MAX_ATTEMPTS)"
            fi
            sleep 1
          done

          # If we get here, MySQL never became ready
          echo "❌ MySQL did not become ready after $MAX_ATTEMPTS attempts"
          echo "Last error:"
          mysqladmin ping -h mysql -u root -proot --connect-timeout=5 --silent 2>&1 || true
          exit 1

      - name: Verify MySQL connection
        run: |
          mysql -h mysql -u root -proot --connect-timeout=5 -e "SELECT 1;" || exit 1
          echo "MySQL connection verified!"

      - name: Run migrations
        working-directory: ./backend
        run: |
          echo "Running migrations..."
          npx sequelize-cli db:migrate \
            --config config/config.js \
            --migrations-path migrations \
            --env test || {
              echo "❌ Migration failed!"
              echo "Cannot proceed with tests without database tables."
              exit 1
            }
          echo "✅ Migrations completed successfully!"

      - name: Show migration status
        working-directory: ./backend
        run: npx sequelize-cli db:migrate:status --config config/config.js --migrations-path migrations --env test

      - name: Verify database setup
        run: |
          echo "Verifying database tables..."
          TABLES=$(mysql -h mysql -u root -proot --connect-timeout=5 "$DB_NAME" -e "SHOW TABLES;" 2>&1)
          if [ $? -eq 0 ]; then
            echo "✅ Database tables exist:"
            echo "$TABLES"
          else
            echo "❌ Failed to verify database tables!"
            exit 1
          fi

      - name: Run tests
        working-directory: ./backend
        timeout-minutes: 10
        run: |
          echo "=========================================="
          echo "Starting Tests"
          echo "=========================================="
          echo "Environment: NODE_ENV=$NODE_ENV"
          echo "Database: $DB_NAME on $DB_HOST"
          echo "Database User: $DB_USER"
          echo "=========================================="
          echo ""
          echo "Verifying database connection before tests..."
          mysql -h mysql -u root -proot --connect-timeout=5 "$DB_NAME" -e "SELECT 1;" || {
            echo "❌ Cannot connect to database!"
            exit 1
          }
          echo "✅ Database connection OK"
          echo ""
          echo "Running Jest tests..."
          if [ -x "./node_modules/.bin/jest" ]; then
            if ./node_modules/.bin/jest --runInBand --coverage --coverageReporters=text-summary; then
              TEST_EXIT_CODE=0
            else
              TEST_EXIT_CODE=$?
            fi
          else
            echo "⚠️ Jest binary not found, falling back to npm test (note: --runInBand may not apply)"
            if npm test; then
              TEST_EXIT_CODE=0
            else
              TEST_EXIT_CODE=$?
            fi
          fi
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo ""
            echo "=========================================="
            echo "✅ All tests passed!"
            echo "=========================================="
          else
            echo ""
            echo "=========================================="
            echo "❌ Tests failed with exit code $TEST_EXIT_CODE"
            echo "=========================================="
            exit $TEST_EXIT_CODE
          fi

      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          file: ./backend/coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
