name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      NODE_ENV: test
      CI: true
      DB_HOST: mysql
      DB_USER: root
      DB_PASSWORD: root
      DB_NAME: nephslair_test
      DB_DIALECT: mysql
      JWT_SECRET: test_jwt_secret_key_for_ci
      PORT: 0

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: nephslair_test
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=5s
          --health-timeout=10s
          --health-retries=120

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Create test environment file
        working-directory: ./backend
        run: |
          cat > .env.test << EOF
          NODE_ENV=${NODE_ENV}
          PORT=${PORT}
          DB_HOST=${DB_HOST}
          DB_USER=${DB_USER}
          DB_PASSWORD=${DB_PASSWORD}
          DB_NAME=${DB_NAME}
          DB_DIALECT=${DB_DIALECT}
          JWT_SECRET=${JWT_SECRET}
          JWT_EXPIRE=7d
          EOF

      - name: Install MySQL client
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends default-mysql-client

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL service to be ready..."
          for i in {1..90}; do
            if mysqladmin ping -h mysql -u root -proot --silent 2>/dev/null; then
              echo "✅ MySQL is ready!"
              exit 0
            fi
            echo "Waiting... (attempt $i/90)"
            sleep 3
          done
          echo "❌ MySQL failed to become ready after 270 seconds"
          echo "---- Debug: mysqladmin ping/status ----"
          mysqladmin ping -h mysql -u root -proot || true
          mysqladmin status -h mysql -u root -proot || true
          echo "---- Debug: try connecting and listing databases ----"
          mysql -h mysql -u root -proot -e "SHOW VARIABLES LIKE 'version%';" || true
          mysql -h mysql -u root -proot -e "SHOW DATABASES;" || true
          exit 1

      - name: Verify MySQL connection
        run: |
          echo "Testing MySQL connection..."
          mysql -h mysql -u root -proot -e "SELECT VERSION();"
          mysql -h mysql -u root -proot -e "SHOW DATABASES;"

      - name: Run migrations
        working-directory: ./backend
        run: |
          echo "Running migrations..."
          npx sequelize-cli db:migrate \
            --config config/config.js \
            --migrations-path migrations \
            --env test
          echo "✅ Migrations completed!"

      - name: Show migration status
        working-directory: ./backend
        run: npx sequelize-cli db:migrate:status --config config/config.js --migrations-path migrations --env test

      - name: Verify database setup
        run: |
          echo "Verifying database tables..."
          mysql -h mysql -u root -proot "$DB_NAME" -e "SHOW TABLES;"

      - name: Run tests
        working-directory: ./backend
        timeout-minutes: 10
        run: |
          echo "=========================================="
          echo "Starting Tests"
          echo "=========================================="
          echo "Environment: NODE_ENV=$NODE_ENV"
          echo "Database: $DB_NAME on $DB_HOST"
          echo "=========================================="
          echo ""
          npm test -- --runInBand --coverage --coverageReporters=text-summary
          echo ""
          echo "=========================================="
          echo "✅ All tests passed!"
          echo "=========================================="

      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          file: ./backend/coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella